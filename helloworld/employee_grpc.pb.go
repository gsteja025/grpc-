// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: employee.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmployeecrudClient is the client API for Employeecrud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeecrudClient interface {
	DeleteEmployee(ctx context.Context, in *Emp, opts ...grpc.CallOption) (*VoidEmpResponse, error)
	CreateEmployee(ctx context.Context, in *Resemp, opts ...grpc.CallOption) (*Emp, error)
	GetEmployees(ctx context.Context, in *VoidEmpRequest, opts ...grpc.CallOption) (*Employees, error)
}

type employeecrudClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeecrudClient(cc grpc.ClientConnInterface) EmployeecrudClient {
	return &employeecrudClient{cc}
}

func (c *employeecrudClient) DeleteEmployee(ctx context.Context, in *Emp, opts ...grpc.CallOption) (*VoidEmpResponse, error) {
	out := new(VoidEmpResponse)
	err := c.cc.Invoke(ctx, "/helloworld.Employeecrud/DeleteEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeecrudClient) CreateEmployee(ctx context.Context, in *Resemp, opts ...grpc.CallOption) (*Emp, error) {
	out := new(Emp)
	err := c.cc.Invoke(ctx, "/helloworld.Employeecrud/CreateEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeecrudClient) GetEmployees(ctx context.Context, in *VoidEmpRequest, opts ...grpc.CallOption) (*Employees, error) {
	out := new(Employees)
	err := c.cc.Invoke(ctx, "/helloworld.Employeecrud/GetEmployees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeecrudServer is the server API for Employeecrud service.
// All implementations must embed UnimplementedEmployeecrudServer
// for forward compatibility
type EmployeecrudServer interface {
	DeleteEmployee(context.Context, *Emp) (*VoidEmpResponse, error)
	CreateEmployee(context.Context, *Resemp) (*Emp, error)
	GetEmployees(context.Context, *VoidEmpRequest) (*Employees, error)
	mustEmbedUnimplementedEmployeecrudServer()
}

// UnimplementedEmployeecrudServer must be embedded to have forward compatible implementations.
type UnimplementedEmployeecrudServer struct {
}

func (UnimplementedEmployeecrudServer) DeleteEmployee(context.Context, *Emp) (*VoidEmpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployee not implemented")
}
func (UnimplementedEmployeecrudServer) CreateEmployee(context.Context, *Resemp) (*Emp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployee not implemented")
}
func (UnimplementedEmployeecrudServer) GetEmployees(context.Context, *VoidEmpRequest) (*Employees, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployees not implemented")
}
func (UnimplementedEmployeecrudServer) mustEmbedUnimplementedEmployeecrudServer() {}

// UnsafeEmployeecrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeecrudServer will
// result in compilation errors.
type UnsafeEmployeecrudServer interface {
	mustEmbedUnimplementedEmployeecrudServer()
}

func RegisterEmployeecrudServer(s grpc.ServiceRegistrar, srv EmployeecrudServer) {
	s.RegisterService(&Employeecrud_ServiceDesc, srv)
}

func _Employeecrud_DeleteEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Emp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeecrudServer).DeleteEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Employeecrud/DeleteEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeecrudServer).DeleteEmployee(ctx, req.(*Emp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Employeecrud_CreateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Resemp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeecrudServer).CreateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Employeecrud/CreateEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeecrudServer).CreateEmployee(ctx, req.(*Resemp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Employeecrud_GetEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidEmpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeecrudServer).GetEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Employeecrud/GetEmployees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeecrudServer).GetEmployees(ctx, req.(*VoidEmpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Employeecrud_ServiceDesc is the grpc.ServiceDesc for Employeecrud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Employeecrud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Employeecrud",
	HandlerType: (*EmployeecrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteEmployee",
			Handler:    _Employeecrud_DeleteEmployee_Handler,
		},
		{
			MethodName: "CreateEmployee",
			Handler:    _Employeecrud_CreateEmployee_Handler,
		},
		{
			MethodName: "GetEmployees",
			Handler:    _Employeecrud_GetEmployees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "employee.proto",
}
